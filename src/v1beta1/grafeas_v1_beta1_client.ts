// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  APICallback,
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  PaginationResponse,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './grafeas_v1_beta1_client_config.json';

const version = require('../../../package.json').version;

/**
 *  [Grafeas](https://grafeas.io) API.
 *
 *  Retrieves analysis results of Cloud components such as Docker container
 *  images.
 *
 *  Analysis results are stored as a series of occurrences. An `Occurrence`
 *  contains information about a specific analysis instance on a resource. An
 *  occurrence refers to a `Note`. A note contains details describing the
 *  analysis and is generally stored in a separate project, called a `Provider`.
 *  Multiple occurrences can refer to the same note.
 *
 *  For example, an SSL vulnerability could affect multiple images. In this case,
 *  there would be one note for the vulnerability and an occurrence for each
 *  image with the vulnerability referring to that note.
 * @class
 * @memberof v1beta1
 */
export class GrafeasV1Beta1Client {
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _innerApiCalls: {[name: string]: Function};
  private _pathTemplates: {[name: string]: gax.PathTemplate};
  private _terminated = false;
  auth: gax.GoogleAuth;
  grafeasV1Beta1Stub: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of GrafeasV1Beta1Client.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {function} [options.promise] - Custom promise module to use instead
   *     of native Promises.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof GrafeasV1Beta1Client;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = typeof window !== 'undefined';
    if (isBrowser) {
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof GrafeasV1Beta1Client).scopes;
    const gaxGrpc = new gaxModule.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    const protos = gaxGrpc.loadProto(
      opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this._pathTemplates = {
      notePathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/notes/{note}'
      ),
      occurrencePathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/occurrences/{occurrence}'
      ),
      scanConfigPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/scanConfigs/{scan_config}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      listOccurrences: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'occurrences'
      ),
      listNotes: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'notes'
      ),
      listNoteOccurrences: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'occurrences'
      ),
    };

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
      'google.devtools.containeranalysis.v1beta1.GrafeasV1Beta1',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.devtools.containeranalysis.v1beta1.GrafeasV1Beta1.
    this.grafeasV1Beta1Stub = gaxGrpc.createStub(
      opts.fallback
        ? (protos as protobuf.Root).lookupService(
            'google.devtools.containeranalysis.v1beta1.GrafeasV1Beta1'
          )
        : // tslint:disable-next-line no-any
          (protos as any).google.devtools.containeranalysis.v1beta1
            .GrafeasV1Beta1,
      opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const grafeasV1Beta1StubMethods = [
      'getOccurrence',
      'listOccurrences',
      'deleteOccurrence',
      'createOccurrence',
      'batchCreateOccurrences',
      'updateOccurrence',
      'getOccurrenceNote',
      'getNote',
      'listNotes',
      'deleteNote',
      'createNote',
      'batchCreateNotes',
      'updateNote',
      'listNoteOccurrences',
      'getVulnerabilityOccurrencesSummary',
    ];

    for (const methodName of grafeasV1Beta1StubMethods) {
      const innerCallPromise = this.grafeasV1Beta1Stub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          return stub[methodName].apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const apiCall = gaxModule.createApiCall(
        innerCallPromise,
        defaults[methodName],
        this._descriptors.page[methodName] ||
          this._descriptors.stream[methodName] ||
          this._descriptors.longrunning[methodName]
      );

      this._innerApiCalls[methodName] = (
        argument: {},
        callOptions?: CallOptions,
        callback?: APICallback
      ) => {
        return apiCall(argument, callOptions, callback);
      };
    }
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'containeranalysis.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'containeranalysis.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getOccurrence(
    request: protosTypes.grafeas.v1beta1.IGetOccurrenceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IOccurrence,
      protosTypes.grafeas.v1beta1.IGetOccurrenceRequest | undefined,
      {} | undefined
    ]
  >;
  getOccurrence(
    request: protosTypes.grafeas.v1beta1.IGetOccurrenceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.grafeas.v1beta1.IOccurrence,
      protosTypes.grafeas.v1beta1.IGetOccurrenceRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets the specified occurrence.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the occurrence in the form of
   *   `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Occurrence]{@link grafeas.v1beta1.Occurrence}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getOccurrence(
    request: protosTypes.grafeas.v1beta1.IGetOccurrenceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.grafeas.v1beta1.IOccurrence,
          protosTypes.grafeas.v1beta1.IGetOccurrenceRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.grafeas.v1beta1.IOccurrence,
      protosTypes.grafeas.v1beta1.IGetOccurrenceRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IOccurrence,
      protosTypes.grafeas.v1beta1.IGetOccurrenceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.getOccurrence(request, options, callback);
  }
  deleteOccurrence(
    request: protosTypes.grafeas.v1beta1.IDeleteOccurrenceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      protosTypes.grafeas.v1beta1.IDeleteOccurrenceRequest | undefined,
      {} | undefined
    ]
  >;
  deleteOccurrence(
    request: protosTypes.grafeas.v1beta1.IDeleteOccurrenceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      protosTypes.grafeas.v1beta1.IDeleteOccurrenceRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Deletes the specified occurrence. For example, use this method to delete an
   * occurrence when the occurrence is no longer applicable for the given
   * resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the occurrence in the form of
   *   `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteOccurrence(
    request: protosTypes.grafeas.v1beta1.IDeleteOccurrenceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.grafeas.v1beta1.IDeleteOccurrenceRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      protosTypes.grafeas.v1beta1.IDeleteOccurrenceRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      protosTypes.grafeas.v1beta1.IDeleteOccurrenceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.deleteOccurrence(request, options, callback);
  }
  createOccurrence(
    request: protosTypes.grafeas.v1beta1.ICreateOccurrenceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IOccurrence,
      protosTypes.grafeas.v1beta1.ICreateOccurrenceRequest | undefined,
      {} | undefined
    ]
  >;
  createOccurrence(
    request: protosTypes.grafeas.v1beta1.ICreateOccurrenceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.grafeas.v1beta1.IOccurrence,
      protosTypes.grafeas.v1beta1.ICreateOccurrenceRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates a new occurrence.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project in the form of `projects/[PROJECT_ID]`, under which
   *   the occurrence is to be created.
   * @param {grafeas.v1beta1.Occurrence} request.occurrence
   *   The occurrence to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Occurrence]{@link grafeas.v1beta1.Occurrence}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createOccurrence(
    request: protosTypes.grafeas.v1beta1.ICreateOccurrenceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.grafeas.v1beta1.IOccurrence,
          protosTypes.grafeas.v1beta1.ICreateOccurrenceRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.grafeas.v1beta1.IOccurrence,
      protosTypes.grafeas.v1beta1.ICreateOccurrenceRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IOccurrence,
      protosTypes.grafeas.v1beta1.ICreateOccurrenceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createOccurrence(request, options, callback);
  }
  batchCreateOccurrences(
    request: protosTypes.grafeas.v1beta1.IBatchCreateOccurrencesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IBatchCreateOccurrencesResponse,
      protosTypes.grafeas.v1beta1.IBatchCreateOccurrencesRequest | undefined,
      {} | undefined
    ]
  >;
  batchCreateOccurrences(
    request: protosTypes.grafeas.v1beta1.IBatchCreateOccurrencesRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.grafeas.v1beta1.IBatchCreateOccurrencesResponse,
      protosTypes.grafeas.v1beta1.IBatchCreateOccurrencesRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates new occurrences in batch.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project in the form of `projects/[PROJECT_ID]`, under which
   *   the occurrences are to be created.
   * @param {number[]} request.occurrences
   *   The occurrences to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BatchCreateOccurrencesResponse]{@link grafeas.v1beta1.BatchCreateOccurrencesResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  batchCreateOccurrences(
    request: protosTypes.grafeas.v1beta1.IBatchCreateOccurrencesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.grafeas.v1beta1.IBatchCreateOccurrencesResponse,
          | protosTypes.grafeas.v1beta1.IBatchCreateOccurrencesRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.grafeas.v1beta1.IBatchCreateOccurrencesResponse,
      protosTypes.grafeas.v1beta1.IBatchCreateOccurrencesRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IBatchCreateOccurrencesResponse,
      protosTypes.grafeas.v1beta1.IBatchCreateOccurrencesRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.batchCreateOccurrences(
      request,
      options,
      callback
    );
  }
  updateOccurrence(
    request: protosTypes.grafeas.v1beta1.IUpdateOccurrenceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IOccurrence,
      protosTypes.grafeas.v1beta1.IUpdateOccurrenceRequest | undefined,
      {} | undefined
    ]
  >;
  updateOccurrence(
    request: protosTypes.grafeas.v1beta1.IUpdateOccurrenceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.grafeas.v1beta1.IOccurrence,
      protosTypes.grafeas.v1beta1.IUpdateOccurrenceRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Updates the specified occurrence.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the occurrence in the form of
   *   `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   * @param {grafeas.v1beta1.Occurrence} request.occurrence
   *   The updated occurrence.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The fields to update.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Occurrence]{@link grafeas.v1beta1.Occurrence}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateOccurrence(
    request: protosTypes.grafeas.v1beta1.IUpdateOccurrenceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.grafeas.v1beta1.IOccurrence,
          protosTypes.grafeas.v1beta1.IUpdateOccurrenceRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.grafeas.v1beta1.IOccurrence,
      protosTypes.grafeas.v1beta1.IUpdateOccurrenceRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IOccurrence,
      protosTypes.grafeas.v1beta1.IUpdateOccurrenceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.updateOccurrence(request, options, callback);
  }
  getOccurrenceNote(
    request: protosTypes.grafeas.v1beta1.IGetOccurrenceNoteRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.IGetOccurrenceNoteRequest | undefined,
      {} | undefined
    ]
  >;
  getOccurrenceNote(
    request: protosTypes.grafeas.v1beta1.IGetOccurrenceNoteRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.IGetOccurrenceNoteRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets the note attached to the specified occurrence. Consumer projects can
   * use this method to get a note that belongs to a provider project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the occurrence in the form of
   *   `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Note]{@link grafeas.v1beta1.Note}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getOccurrenceNote(
    request: protosTypes.grafeas.v1beta1.IGetOccurrenceNoteRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.grafeas.v1beta1.INote,
          protosTypes.grafeas.v1beta1.IGetOccurrenceNoteRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.IGetOccurrenceNoteRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.IGetOccurrenceNoteRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.getOccurrenceNote(request, options, callback);
  }
  getNote(
    request: protosTypes.grafeas.v1beta1.IGetNoteRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.IGetNoteRequest | undefined,
      {} | undefined
    ]
  >;
  getNote(
    request: protosTypes.grafeas.v1beta1.IGetNoteRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.IGetNoteRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets the specified note.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the note in the form of
   *   `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Note]{@link grafeas.v1beta1.Note}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getNote(
    request: protosTypes.grafeas.v1beta1.IGetNoteRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.grafeas.v1beta1.INote,
          protosTypes.grafeas.v1beta1.IGetNoteRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.IGetNoteRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.IGetNoteRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.getNote(request, options, callback);
  }
  deleteNote(
    request: protosTypes.grafeas.v1beta1.IDeleteNoteRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      protosTypes.grafeas.v1beta1.IDeleteNoteRequest | undefined,
      {} | undefined
    ]
  >;
  deleteNote(
    request: protosTypes.grafeas.v1beta1.IDeleteNoteRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      protosTypes.grafeas.v1beta1.IDeleteNoteRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Deletes the specified note.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the note in the form of
   *   `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteNote(
    request: protosTypes.grafeas.v1beta1.IDeleteNoteRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.grafeas.v1beta1.IDeleteNoteRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      protosTypes.grafeas.v1beta1.IDeleteNoteRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      protosTypes.grafeas.v1beta1.IDeleteNoteRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.deleteNote(request, options, callback);
  }
  createNote(
    request: protosTypes.grafeas.v1beta1.ICreateNoteRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.ICreateNoteRequest | undefined,
      {} | undefined
    ]
  >;
  createNote(
    request: protosTypes.grafeas.v1beta1.ICreateNoteRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.ICreateNoteRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates a new note.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project in the form of `projects/[PROJECT_ID]`, under which
   *   the note is to be created.
   * @param {string} request.noteId
   *   The ID to use for this note.
   * @param {grafeas.v1beta1.Note} request.note
   *   The note to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Note]{@link grafeas.v1beta1.Note}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createNote(
    request: protosTypes.grafeas.v1beta1.ICreateNoteRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.grafeas.v1beta1.INote,
          protosTypes.grafeas.v1beta1.ICreateNoteRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.ICreateNoteRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.ICreateNoteRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createNote(request, options, callback);
  }
  batchCreateNotes(
    request: protosTypes.grafeas.v1beta1.IBatchCreateNotesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IBatchCreateNotesResponse,
      protosTypes.grafeas.v1beta1.IBatchCreateNotesRequest | undefined,
      {} | undefined
    ]
  >;
  batchCreateNotes(
    request: protosTypes.grafeas.v1beta1.IBatchCreateNotesRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.grafeas.v1beta1.IBatchCreateNotesResponse,
      protosTypes.grafeas.v1beta1.IBatchCreateNotesRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates new notes in batch.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project in the form of `projects/[PROJECT_ID]`, under which
   *   the notes are to be created.
   * @param {number[]} request.notes
   *   The notes to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BatchCreateNotesResponse]{@link grafeas.v1beta1.BatchCreateNotesResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  batchCreateNotes(
    request: protosTypes.grafeas.v1beta1.IBatchCreateNotesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.grafeas.v1beta1.IBatchCreateNotesResponse,
          protosTypes.grafeas.v1beta1.IBatchCreateNotesRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.grafeas.v1beta1.IBatchCreateNotesResponse,
      protosTypes.grafeas.v1beta1.IBatchCreateNotesRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IBatchCreateNotesResponse,
      protosTypes.grafeas.v1beta1.IBatchCreateNotesRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.batchCreateNotes(request, options, callback);
  }
  updateNote(
    request: protosTypes.grafeas.v1beta1.IUpdateNoteRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.IUpdateNoteRequest | undefined,
      {} | undefined
    ]
  >;
  updateNote(
    request: protosTypes.grafeas.v1beta1.IUpdateNoteRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.IUpdateNoteRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Updates the specified note.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the note in the form of
   *   `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   * @param {grafeas.v1beta1.Note} request.note
   *   The updated note.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The fields to update.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Note]{@link grafeas.v1beta1.Note}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateNote(
    request: protosTypes.grafeas.v1beta1.IUpdateNoteRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.grafeas.v1beta1.INote,
          protosTypes.grafeas.v1beta1.IUpdateNoteRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.IUpdateNoteRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.INote,
      protosTypes.grafeas.v1beta1.IUpdateNoteRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.updateNote(request, options, callback);
  }
  getVulnerabilityOccurrencesSummary(
    request: protosTypes.grafeas.v1beta1.IGetVulnerabilityOccurrencesSummaryRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IVulnerabilityOccurrencesSummary,
      (
        | protosTypes.grafeas.v1beta1.IGetVulnerabilityOccurrencesSummaryRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getVulnerabilityOccurrencesSummary(
    request: protosTypes.grafeas.v1beta1.IGetVulnerabilityOccurrencesSummaryRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.grafeas.v1beta1.IVulnerabilityOccurrencesSummary,
      | protosTypes.grafeas.v1beta1.IGetVulnerabilityOccurrencesSummaryRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets a summary of the number and severity of occurrences.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project to get a vulnerability summary for in the form of
   *   `projects/[PROJECT_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [VulnerabilityOccurrencesSummary]{@link grafeas.v1beta1.VulnerabilityOccurrencesSummary}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getVulnerabilityOccurrencesSummary(
    request: protosTypes.grafeas.v1beta1.IGetVulnerabilityOccurrencesSummaryRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.grafeas.v1beta1.IVulnerabilityOccurrencesSummary,
          | protosTypes.grafeas.v1beta1.IGetVulnerabilityOccurrencesSummaryRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.grafeas.v1beta1.IVulnerabilityOccurrencesSummary,
      | protosTypes.grafeas.v1beta1.IGetVulnerabilityOccurrencesSummaryRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IVulnerabilityOccurrencesSummary,
      (
        | protosTypes.grafeas.v1beta1.IGetVulnerabilityOccurrencesSummaryRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.getVulnerabilityOccurrencesSummary(
      request,
      options,
      callback
    );
  }

  listOccurrences(
    request: protosTypes.grafeas.v1beta1.IListOccurrencesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IOccurrence[],
      protosTypes.grafeas.v1beta1.IListOccurrencesRequest | null,
      protosTypes.grafeas.v1beta1.IListOccurrencesResponse
    ]
  >;
  listOccurrences(
    request: protosTypes.grafeas.v1beta1.IListOccurrencesRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.grafeas.v1beta1.IOccurrence[],
      protosTypes.grafeas.v1beta1.IListOccurrencesRequest | null,
      protosTypes.grafeas.v1beta1.IListOccurrencesResponse
    >
  ): void;
  /**
   * Lists occurrences for the specified project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project to list occurrences for in the form of
   *   `projects/[PROJECT_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {number} request.pageSize
   *   Number of occurrences to return in the list.
   * @param {string} request.pageToken
   *   Token to provide to skip to a particular spot in the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Occurrence]{@link grafeas.v1beta1.Occurrence}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Occurrence]{@link grafeas.v1beta1.Occurrence} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListOccurrencesRequest]{@link grafeas.v1beta1.ListOccurrencesRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListOccurrencesResponse]{@link grafeas.v1beta1.ListOccurrencesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listOccurrences(
    request: protosTypes.grafeas.v1beta1.IListOccurrencesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.grafeas.v1beta1.IOccurrence[],
          protosTypes.grafeas.v1beta1.IListOccurrencesRequest | null,
          protosTypes.grafeas.v1beta1.IListOccurrencesResponse
        >,
    callback?: Callback<
      protosTypes.grafeas.v1beta1.IOccurrence[],
      protosTypes.grafeas.v1beta1.IListOccurrencesRequest | null,
      protosTypes.grafeas.v1beta1.IListOccurrencesResponse
    >
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IOccurrence[],
      protosTypes.grafeas.v1beta1.IListOccurrencesRequest | null,
      protosTypes.grafeas.v1beta1.IListOccurrencesResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.listOccurrences(request, options, callback);
  }

  /**
   * Equivalent to {@link listOccurrences}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listOccurrences} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project to list occurrences for in the form of
   *   `projects/[PROJECT_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {number} request.pageSize
   *   Number of occurrences to return in the list.
   * @param {string} request.pageToken
   *   Token to provide to skip to a particular spot in the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Occurrence]{@link grafeas.v1beta1.Occurrence} on 'data' event.
   */
  listOccurrencesStream(
    request?: protosTypes.grafeas.v1beta1.IListOccurrencesRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listOccurrences.createStream(
      this._innerApiCalls.listOccurrences as gax.GaxCall,
      request,
      callSettings
    );
  }
  listNotes(
    request: protosTypes.grafeas.v1beta1.IListNotesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.INote[],
      protosTypes.grafeas.v1beta1.IListNotesRequest | null,
      protosTypes.grafeas.v1beta1.IListNotesResponse
    ]
  >;
  listNotes(
    request: protosTypes.grafeas.v1beta1.IListNotesRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.grafeas.v1beta1.INote[],
      protosTypes.grafeas.v1beta1.IListNotesRequest | null,
      protosTypes.grafeas.v1beta1.IListNotesResponse
    >
  ): void;
  /**
   * Lists notes for the specified project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project to list notes for in the form of
   *   `projects/[PROJECT_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {number} request.pageSize
   *   Number of notes to return in the list.
   * @param {string} request.pageToken
   *   Token to provide to skip to a particular spot in the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Note]{@link grafeas.v1beta1.Note}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Note]{@link grafeas.v1beta1.Note} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListNotesRequest]{@link grafeas.v1beta1.ListNotesRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListNotesResponse]{@link grafeas.v1beta1.ListNotesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listNotes(
    request: protosTypes.grafeas.v1beta1.IListNotesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.grafeas.v1beta1.INote[],
          protosTypes.grafeas.v1beta1.IListNotesRequest | null,
          protosTypes.grafeas.v1beta1.IListNotesResponse
        >,
    callback?: Callback<
      protosTypes.grafeas.v1beta1.INote[],
      protosTypes.grafeas.v1beta1.IListNotesRequest | null,
      protosTypes.grafeas.v1beta1.IListNotesResponse
    >
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.INote[],
      protosTypes.grafeas.v1beta1.IListNotesRequest | null,
      protosTypes.grafeas.v1beta1.IListNotesResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.listNotes(request, options, callback);
  }

  /**
   * Equivalent to {@link listNotes}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listNotes} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project to list notes for in the form of
   *   `projects/[PROJECT_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {number} request.pageSize
   *   Number of notes to return in the list.
   * @param {string} request.pageToken
   *   Token to provide to skip to a particular spot in the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Note]{@link grafeas.v1beta1.Note} on 'data' event.
   */
  listNotesStream(
    request?: protosTypes.grafeas.v1beta1.IListNotesRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listNotes.createStream(
      this._innerApiCalls.listNotes as gax.GaxCall,
      request,
      callSettings
    );
  }
  listNoteOccurrences(
    request: protosTypes.grafeas.v1beta1.IListNoteOccurrencesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IOccurrence[],
      protosTypes.grafeas.v1beta1.IListNoteOccurrencesRequest | null,
      protosTypes.grafeas.v1beta1.IListNoteOccurrencesResponse
    ]
  >;
  listNoteOccurrences(
    request: protosTypes.grafeas.v1beta1.IListNoteOccurrencesRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.grafeas.v1beta1.IOccurrence[],
      protosTypes.grafeas.v1beta1.IListNoteOccurrencesRequest | null,
      protosTypes.grafeas.v1beta1.IListNoteOccurrencesResponse
    >
  ): void;
  /**
   * Lists occurrences referencing the specified note. Provider projects can use
   * this method to get all occurrences across consumer projects referencing the
   * specified note.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the note to list occurrences for in the form of
   *   `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {number} request.pageSize
   *   Number of occurrences to return in the list.
   * @param {string} request.pageToken
   *   Token to provide to skip to a particular spot in the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Occurrence]{@link grafeas.v1beta1.Occurrence}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Occurrence]{@link grafeas.v1beta1.Occurrence} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListNoteOccurrencesRequest]{@link grafeas.v1beta1.ListNoteOccurrencesRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListNoteOccurrencesResponse]{@link grafeas.v1beta1.ListNoteOccurrencesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listNoteOccurrences(
    request: protosTypes.grafeas.v1beta1.IListNoteOccurrencesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.grafeas.v1beta1.IOccurrence[],
          protosTypes.grafeas.v1beta1.IListNoteOccurrencesRequest | null,
          protosTypes.grafeas.v1beta1.IListNoteOccurrencesResponse
        >,
    callback?: Callback<
      protosTypes.grafeas.v1beta1.IOccurrence[],
      protosTypes.grafeas.v1beta1.IListNoteOccurrencesRequest | null,
      protosTypes.grafeas.v1beta1.IListNoteOccurrencesResponse
    >
  ): Promise<
    [
      protosTypes.grafeas.v1beta1.IOccurrence[],
      protosTypes.grafeas.v1beta1.IListNoteOccurrencesRequest | null,
      protosTypes.grafeas.v1beta1.IListNoteOccurrencesResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.listNoteOccurrences(request, options, callback);
  }

  /**
   * Equivalent to {@link listNoteOccurrences}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listNoteOccurrences} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the note to list occurrences for in the form of
   *   `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {number} request.pageSize
   *   Number of occurrences to return in the list.
   * @param {string} request.pageToken
   *   Token to provide to skip to a particular spot in the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Occurrence]{@link grafeas.v1beta1.Occurrence} on 'data' event.
   */
  listNoteOccurrencesStream(
    request?: protosTypes.grafeas.v1beta1.IListNoteOccurrencesRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listNoteOccurrences.createStream(
      this._innerApiCalls.listNoteOccurrences as gax.GaxCall,
      request,
      callSettings
    );
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified note resource name string.
   *
   * @param {string} project
   * @param {string} note
   * @returns {string} Resource name string.
   */
  notePath(project: string, note: string) {
    return this._pathTemplates.notePathTemplate.render({
      project,
      note,
    });
  }

  /**
   * Parse the project from Note resource.
   *
   * @param {string} noteName
   *   A fully-qualified path representing Note resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNoteName(noteName: string) {
    return this._pathTemplates.notePathTemplate.match(noteName).project;
  }

  /**
   * Parse the note from Note resource.
   *
   * @param {string} noteName
   *   A fully-qualified path representing Note resource.
   * @returns {string} A string representing the note.
   */
  matchNoteFromNoteName(noteName: string) {
    return this._pathTemplates.notePathTemplate.match(noteName).note;
  }

  /**
   * Return a fully-qualified occurrence resource name string.
   *
   * @param {string} project
   * @param {string} occurrence
   * @returns {string} Resource name string.
   */
  occurrencePath(project: string, occurrence: string) {
    return this._pathTemplates.occurrencePathTemplate.render({
      project,
      occurrence,
    });
  }

  /**
   * Parse the project from Occurrence resource.
   *
   * @param {string} occurrenceName
   *   A fully-qualified path representing Occurrence resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromOccurrenceName(occurrenceName: string) {
    return this._pathTemplates.occurrencePathTemplate.match(occurrenceName)
      .project;
  }

  /**
   * Parse the occurrence from Occurrence resource.
   *
   * @param {string} occurrenceName
   *   A fully-qualified path representing Occurrence resource.
   * @returns {string} A string representing the occurrence.
   */
  matchOccurrenceFromOccurrenceName(occurrenceName: string) {
    return this._pathTemplates.occurrencePathTemplate.match(occurrenceName)
      .occurrence;
  }

  /**
   * Return a fully-qualified scanConfig resource name string.
   *
   * @param {string} project
   * @param {string} scan_config
   * @returns {string} Resource name string.
   */
  scanConfigPath(project: string, scanConfig: string) {
    return this._pathTemplates.scanConfigPathTemplate.render({
      project,
      scan_config: scanConfig,
    });
  }

  /**
   * Parse the project from ScanConfig resource.
   *
   * @param {string} scanConfigName
   *   A fully-qualified path representing ScanConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromScanConfigName(scanConfigName: string) {
    return this._pathTemplates.scanConfigPathTemplate.match(scanConfigName)
      .project;
  }

  /**
   * Parse the scan_config from ScanConfig resource.
   *
   * @param {string} scanConfigName
   *   A fully-qualified path representing ScanConfig resource.
   * @returns {string} A string representing the scan_config.
   */
  matchScanConfigFromScanConfigName(scanConfigName: string) {
    return this._pathTemplates.scanConfigPathTemplate.match(scanConfigName)
      .scan_config;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    if (!this._terminated) {
      return this.grafeasV1Beta1Stub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
